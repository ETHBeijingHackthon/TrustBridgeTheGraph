// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NFTCollected extends ethereum.Event {
  get params(): NFTCollected__Params {
    return new NFTCollected__Params(this);
  }
}

export class NFTCollected__Params {
  _event: NFTCollected;

  constructor(event: NFTCollected) {
    this._event = event;
  }

  get nftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collector(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get NFTCollected(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTCreated extends ethereum.Event {
  get params(): NFTCreated__Params {
    return new NFTCreated__Params(this);
  }
}

export class NFTCreated__Params {
  _event: NFTCreated;

  constructor(event: NFTCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sort(): string {
    return this._event.parameters[2].value.toString();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get cover(): string {
    return this._event.parameters[4].value.toString();
  }

  get multimedia(): string {
    return this._event.parameters[5].value.toString();
  }

  get title(): string {
    return this._event.parameters[6].value.toString();
  }

  get description(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class NFTReviewed extends ethereum.Event {
  get params(): NFTReviewed__Params {
    return new NFTReviewed__Params(this);
  }
}

export class NFTReviewed__Params {
  _event: NFTReviewed;

  constructor(event: NFTReviewed) {
    this._event = event;
  }

  get nftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reviewId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reviewCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftScore(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reviewer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get score(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[6].value.toString();
  }

  get multimedia(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TrustBridge__nftsResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: Address;
  value4: string;
  value5: string;
  value6: string;
  value7: string;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: string,
    value3: Address,
    value4: string,
    value5: string,
    value6: string,
    value7: string,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getFid(): BigInt {
    return this.value1;
  }

  getSort(): string {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getCoverURI(): string {
    return this.value4;
  }

  getMultimedia(): string {
    return this.value5;
  }

  getTitle(): string {
    return this.value6;
  }

  getDescription(): string {
    return this.value7;
  }

  getReviewCount(): BigInt {
    return this.value8;
  }

  getScore(): BigInt {
    return this.value9;
  }

  getCollectCount(): BigInt {
    return this.value10;
  }
}

export class TrustBridge__reviewsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: string;
  value5: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: string,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getNftId(): BigInt {
    return this.value0;
  }

  getReviewId(): BigInt {
    return this.value1;
  }

  getReviewer(): Address {
    return this.value2;
  }

  getScore(): BigInt {
    return this.value3;
  }

  getDescription(): string {
    return this.value4;
  }

  getMultimedia(): string {
    return this.value5;
  }
}

export class TrustBridge extends ethereum.SmartContract {
  static bind(address: Address): TrustBridge {
    return new TrustBridge("TrustBridge", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionCount(_nftId: BigInt): BigInt {
    let result = super.call(
      "getCollectionCount",
      "getCollectionCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftId)]
    );

    return result[0].toBigInt();
  }

  try_getCollectionCount(_nftId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollectionCount",
      "getCollectionCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nfts(param0: BigInt): TrustBridge__nftsResult {
    let result = super.call(
      "nfts",
      "nfts(uint256):(uint256,uint256,string,address,string,string,string,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TrustBridge__nftsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toAddress(),
      result[4].toString(),
      result[5].toString(),
      result[6].toString(),
      result[7].toString(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_nfts(param0: BigInt): ethereum.CallResult<TrustBridge__nftsResult> {
    let result = super.tryCall(
      "nfts",
      "nfts(uint256):(uint256,uint256,string,address,string,string,string,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustBridge__nftsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toAddress(),
        value[4].toString(),
        value[5].toString(),
        value[6].toString(),
        value[7].toString(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reviews(param0: BigInt, param1: BigInt): TrustBridge__reviewsResult {
    let result = super.call(
      "reviews",
      "reviews(uint256,uint256):(uint256,uint256,address,uint256,string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TrustBridge__reviewsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toString()
    );
  }

  try_reviews(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<TrustBridge__reviewsResult> {
    let result = super.tryCall(
      "reviews",
      "reviews(uint256,uint256):(uint256,uint256,address,uint256,string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustBridge__reviewsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toString()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CollectNFTCall extends ethereum.Call {
  get inputs(): CollectNFTCall__Inputs {
    return new CollectNFTCall__Inputs(this);
  }

  get outputs(): CollectNFTCall__Outputs {
    return new CollectNFTCall__Outputs(this);
  }
}

export class CollectNFTCall__Inputs {
  _call: CollectNFTCall;

  constructor(call: CollectNFTCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectNFTCall__Outputs {
  _call: CollectNFTCall;

  constructor(call: CollectNFTCall) {
    this._call = call;
  }
}

export class CreateNFTCall extends ethereum.Call {
  get inputs(): CreateNFTCall__Inputs {
    return new CreateNFTCall__Inputs(this);
  }

  get outputs(): CreateNFTCall__Outputs {
    return new CreateNFTCall__Outputs(this);
  }
}

export class CreateNFTCall__Inputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }

  get _sort(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _coverURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _multimedia(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _title(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateNFTCall__Outputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }
}

export class ReviewNFTCall extends ethereum.Call {
  get inputs(): ReviewNFTCall__Inputs {
    return new ReviewNFTCall__Inputs(this);
  }

  get outputs(): ReviewNFTCall__Outputs {
    return new ReviewNFTCall__Outputs(this);
  }
}

export class ReviewNFTCall__Inputs {
  _call: ReviewNFTCall;

  constructor(call: ReviewNFTCall) {
    this._call = call;
  }

  get _nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _score(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _multimedia(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ReviewNFTCall__Outputs {
  _call: ReviewNFTCall;

  constructor(call: ReviewNFTCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

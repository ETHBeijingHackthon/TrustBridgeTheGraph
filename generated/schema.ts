// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFTCollectedEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTCollectedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NFTCollectedEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTCollectedEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NFTCollectedEntity | null {
    return changetype<NFTCollectedEntity | null>(
      store.get("NFTCollectedEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collector(): Bytes {
    let value = this.get("collector");
    return value!.toBytes();
  }

  set collector(value: Bytes) {
    this.set("collector", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value!.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }
}

export class NFTCreatedEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NFTCreatedEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTCreatedEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NFTCreatedEntity | null {
    return changetype<NFTCreatedEntity | null>(
      store.get("NFTCreatedEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value!.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get fid(): BigInt {
    let value = this.get("fid");
    return value!.toBigInt();
  }

  set fid(value: BigInt) {
    this.set("fid", Value.fromBigInt(value));
  }

  get sort(): string {
    let value = this.get("sort");
    return value!.toString();
  }

  set sort(value: string) {
    this.set("sort", Value.fromString(value));
  }

  get coverUri(): string {
    let value = this.get("coverUri");
    return value!.toString();
  }

  set coverUri(value: string) {
    this.set("coverUri", Value.fromString(value));
  }

  get multimedia(): string {
    let value = this.get("multimedia");
    return value!.toString();
  }

  set multimedia(value: string) {
    this.set("multimedia", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get reviewCount(): BigInt {
    let value = this.get("reviewCount");
    return value!.toBigInt();
  }

  set reviewCount(value: BigInt) {
    this.set("reviewCount", Value.fromBigInt(value));
  }

  get collectCount(): BigInt {
    let value = this.get("collectCount");
    return value!.toBigInt();
  }

  set collectCount(value: BigInt) {
    this.set("collectCount", Value.fromBigInt(value));
  }
}

export class NFTReviewedEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTReviewedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NFTReviewedEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTReviewedEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NFTReviewedEntity | null {
    return changetype<NFTReviewedEntity | null>(
      store.get("NFTReviewedEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get reviewer(): Bytes {
    let value = this.get("reviewer");
    return value!.toBytes();
  }

  set reviewer(value: Bytes) {
    this.set("reviewer", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value!.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get multimedia(): string {
    let value = this.get("multimedia");
    return value!.toString();
  }

  set multimedia(value: string) {
    this.set("multimedia", Value.fromString(value));
  }
}
